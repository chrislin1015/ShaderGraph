Shader "Chris/RadialBlur2"
{
    Properties
    {
        [NoScaleOffset] _MainTex("MainTex", 2D) = "white" {}
_Center("Center", Vector) = (0.5,0.5,0,0)
_Dist("Dist", Float) = 1
_Strength("Strength", Float) = 2

    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="LightweightPipeline"
            "RenderType"="Opaque"
            "Queue"="Geometry+0"
        }
        Pass
        {
            Name "StandardUnlit"
            Tags{"LightMode" = "LightweightForward"}

            // Material options generated by graph

            Blend One Zero, One Zero

            Cull Back

            ZTest LEqual

            ZWrite On

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            // -------------------------------------
            // Lightweight Pipeline keywords
            #pragma shader_feature _SAMPLE_GI

            // -------------------------------------
            // Unity defined keywords
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile_fog

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing
            
            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph

            // Lighting include is needed because of GI
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/Shaders/UnlitInput.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float2 _Center;
            float _Dist;
            float _Strength;
            CBUFFER_END

            TEXTURE2D(_MainTex); SAMPLER(sampler_MainTex); float4 _MainTex_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 ObjectSpacePosition;
            };

            struct SurfaceDescriptionInputs
            {
                half4 uv0;
            };


            void Unity_Subtract_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A - B;
            }

            void Unity_Normalize_float2(float2 In, out float2 Out)
            {
                Out = normalize(In);
            }

            void Unity_Multiply_float (float2 A, float2 B, out float2 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A + B;
            }

            void Unity_Add_float4(float4 A, float4 B, out float4 Out)
            {
                Out = A + B;
            }

            void Unity_Divide_float4(float4 A, float4 B, out float4 Out)
            {
                Out = A / B;
            }

            void Unity_Length_float2(float2 In, out float Out)
            {
                Out = length(In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_Clamp_float(float In, float Min, float Max, out float Out)
            {
                Out = clamp(In, Min, Max);
            }

            void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
            {
                Out = lerp(A, B, T);
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                description.Position = IN.ObjectSpacePosition;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Color;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float4 _SampleTexture2D_4BCC2478_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, IN.uv0.xy);
                float _SampleTexture2D_4BCC2478_R_4 = _SampleTexture2D_4BCC2478_RGBA_0.r;
                float _SampleTexture2D_4BCC2478_G_5 = _SampleTexture2D_4BCC2478_RGBA_0.g;
                float _SampleTexture2D_4BCC2478_B_6 = _SampleTexture2D_4BCC2478_RGBA_0.b;
                float _SampleTexture2D_4BCC2478_A_7 = _SampleTexture2D_4BCC2478_RGBA_0.a;
                float4 _UV_916444B5_Out_0 = IN.uv0;
                float _Vector1_311C8DB3_Out_0 = -0.08;
                float4 _UV_AF55A25A_Out_0 = IN.uv0;
                float2 _Property_589D5AB4_Out_0 = _Center;
                float2 _Subtract_9124AC61_Out_2;
                Unity_Subtract_float2((_UV_AF55A25A_Out_0.xy), _Property_589D5AB4_Out_0, _Subtract_9124AC61_Out_2);
                float2 _Normalize_AC6DE0D4_Out_1;
                Unity_Normalize_float2(_Subtract_9124AC61_Out_2, _Normalize_AC6DE0D4_Out_1);
                float2 _Multiply_4B40742E_Out_2;
                Unity_Multiply_float((_Vector1_311C8DB3_Out_0.xx), _Normalize_AC6DE0D4_Out_1, _Multiply_4B40742E_Out_2);

                float _Property_E31CB9D8_Out_0 = _Dist;
                float2 _Multiply_BCA95B3C_Out_2;
                Unity_Multiply_float(_Multiply_4B40742E_Out_2, (_Property_E31CB9D8_Out_0.xx), _Multiply_BCA95B3C_Out_2);

                float2 _Add_DE8D6A2C_Out_2;
                Unity_Add_float2((_UV_916444B5_Out_0.xy), _Multiply_BCA95B3C_Out_2, _Add_DE8D6A2C_Out_2);
                float4 _SampleTexture2D_196D08A9_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, _Add_DE8D6A2C_Out_2);
                float _SampleTexture2D_196D08A9_R_4 = _SampleTexture2D_196D08A9_RGBA_0.r;
                float _SampleTexture2D_196D08A9_G_5 = _SampleTexture2D_196D08A9_RGBA_0.g;
                float _SampleTexture2D_196D08A9_B_6 = _SampleTexture2D_196D08A9_RGBA_0.b;
                float _SampleTexture2D_196D08A9_A_7 = _SampleTexture2D_196D08A9_RGBA_0.a;
                float4 _Add_23D030A_Out_2;
                Unity_Add_float4(_SampleTexture2D_4BCC2478_RGBA_0, _SampleTexture2D_196D08A9_RGBA_0, _Add_23D030A_Out_2);
                float4 _UV_E7C8DC64_Out_0 = IN.uv0;
                float _Vector1_1C146333_Out_0 = -0.05;
                float2 _Multiply_5ADF3BAD_Out_2;
                Unity_Multiply_float((_Vector1_1C146333_Out_0.xx), _Normalize_AC6DE0D4_Out_1, _Multiply_5ADF3BAD_Out_2);

                float _Property_4C20C1F8_Out_0 = _Dist;
                float2 _Multiply_1CA846CD_Out_2;
                Unity_Multiply_float(_Multiply_5ADF3BAD_Out_2, (_Property_4C20C1F8_Out_0.xx), _Multiply_1CA846CD_Out_2);

                float2 _Add_24BC128D_Out_2;
                Unity_Add_float2((_UV_E7C8DC64_Out_0.xy), _Multiply_1CA846CD_Out_2, _Add_24BC128D_Out_2);
                float4 _SampleTexture2D_EECEA451_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, _Add_24BC128D_Out_2);
                float _SampleTexture2D_EECEA451_R_4 = _SampleTexture2D_EECEA451_RGBA_0.r;
                float _SampleTexture2D_EECEA451_G_5 = _SampleTexture2D_EECEA451_RGBA_0.g;
                float _SampleTexture2D_EECEA451_B_6 = _SampleTexture2D_EECEA451_RGBA_0.b;
                float _SampleTexture2D_EECEA451_A_7 = _SampleTexture2D_EECEA451_RGBA_0.a;
                float4 _Add_B13BD05E_Out_2;
                Unity_Add_float4(_Add_23D030A_Out_2, _SampleTexture2D_EECEA451_RGBA_0, _Add_B13BD05E_Out_2);
                float4 _UV_8B08D507_Out_0 = IN.uv0;
                float _Vector1_83B3C7B3_Out_0 = -0.03;
                float2 _Multiply_3DA93B72_Out_2;
                Unity_Multiply_float((_Vector1_83B3C7B3_Out_0.xx), _Normalize_AC6DE0D4_Out_1, _Multiply_3DA93B72_Out_2);

                float _Property_CA394034_Out_0 = _Dist;
                float2 _Multiply_5B4AC261_Out_2;
                Unity_Multiply_float(_Multiply_3DA93B72_Out_2, (_Property_CA394034_Out_0.xx), _Multiply_5B4AC261_Out_2);

                float2 _Add_5E65B6D2_Out_2;
                Unity_Add_float2((_UV_8B08D507_Out_0.xy), _Multiply_5B4AC261_Out_2, _Add_5E65B6D2_Out_2);
                float4 _SampleTexture2D_739470BD_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, _Add_5E65B6D2_Out_2);
                float _SampleTexture2D_739470BD_R_4 = _SampleTexture2D_739470BD_RGBA_0.r;
                float _SampleTexture2D_739470BD_G_5 = _SampleTexture2D_739470BD_RGBA_0.g;
                float _SampleTexture2D_739470BD_B_6 = _SampleTexture2D_739470BD_RGBA_0.b;
                float _SampleTexture2D_739470BD_A_7 = _SampleTexture2D_739470BD_RGBA_0.a;
                float4 _Add_41EDDEDB_Out_2;
                Unity_Add_float4(_Add_B13BD05E_Out_2, _SampleTexture2D_739470BD_RGBA_0, _Add_41EDDEDB_Out_2);
                float4 _UV_546DDA7A_Out_0 = IN.uv0;
                float _Vector1_3316E5BA_Out_0 = -0.02;
                float2 _Multiply_B80840F7_Out_2;
                Unity_Multiply_float((_Vector1_3316E5BA_Out_0.xx), _Normalize_AC6DE0D4_Out_1, _Multiply_B80840F7_Out_2);

                float _Property_92350703_Out_0 = _Dist;
                float2 _Multiply_E002C231_Out_2;
                Unity_Multiply_float(_Multiply_B80840F7_Out_2, (_Property_92350703_Out_0.xx), _Multiply_E002C231_Out_2);

                float2 _Add_4824FAF7_Out_2;
                Unity_Add_float2((_UV_546DDA7A_Out_0.xy), _Multiply_E002C231_Out_2, _Add_4824FAF7_Out_2);
                float4 _SampleTexture2D_993E4C2E_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, _Add_4824FAF7_Out_2);
                float _SampleTexture2D_993E4C2E_R_4 = _SampleTexture2D_993E4C2E_RGBA_0.r;
                float _SampleTexture2D_993E4C2E_G_5 = _SampleTexture2D_993E4C2E_RGBA_0.g;
                float _SampleTexture2D_993E4C2E_B_6 = _SampleTexture2D_993E4C2E_RGBA_0.b;
                float _SampleTexture2D_993E4C2E_A_7 = _SampleTexture2D_993E4C2E_RGBA_0.a;
                float4 _Add_66E5C2D0_Out_2;
                Unity_Add_float4(_Add_41EDDEDB_Out_2, _SampleTexture2D_993E4C2E_RGBA_0, _Add_66E5C2D0_Out_2);
                float4 _UV_FF62D0F9_Out_0 = IN.uv0;
                float _Vector1_4554D14_Out_0 = -0.01;
                float2 _Multiply_62C68A65_Out_2;
                Unity_Multiply_float((_Vector1_4554D14_Out_0.xx), _Normalize_AC6DE0D4_Out_1, _Multiply_62C68A65_Out_2);

                float _Property_24A809AF_Out_0 = _Dist;
                float2 _Multiply_D789E10A_Out_2;
                Unity_Multiply_float(_Multiply_62C68A65_Out_2, (_Property_24A809AF_Out_0.xx), _Multiply_D789E10A_Out_2);

                float2 _Add_C87907BF_Out_2;
                Unity_Add_float2((_UV_FF62D0F9_Out_0.xy), _Multiply_D789E10A_Out_2, _Add_C87907BF_Out_2);
                float4 _SampleTexture2D_66FA8E2B_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, _Add_C87907BF_Out_2);
                float _SampleTexture2D_66FA8E2B_R_4 = _SampleTexture2D_66FA8E2B_RGBA_0.r;
                float _SampleTexture2D_66FA8E2B_G_5 = _SampleTexture2D_66FA8E2B_RGBA_0.g;
                float _SampleTexture2D_66FA8E2B_B_6 = _SampleTexture2D_66FA8E2B_RGBA_0.b;
                float _SampleTexture2D_66FA8E2B_A_7 = _SampleTexture2D_66FA8E2B_RGBA_0.a;
                float4 _Add_61147478_Out_2;
                Unity_Add_float4(_Add_66E5C2D0_Out_2, _SampleTexture2D_66FA8E2B_RGBA_0, _Add_61147478_Out_2);
                float4 _UV_F641D8AC_Out_0 = IN.uv0;
                float _Vector1_D7ED0E58_Out_0 = 0.01;
                float2 _Multiply_81AE9DCF_Out_2;
                Unity_Multiply_float((_Vector1_D7ED0E58_Out_0.xx), _Normalize_AC6DE0D4_Out_1, _Multiply_81AE9DCF_Out_2);

                float _Property_8D4C6EF8_Out_0 = _Dist;
                float2 _Multiply_469E0482_Out_2;
                Unity_Multiply_float(_Multiply_81AE9DCF_Out_2, (_Property_8D4C6EF8_Out_0.xx), _Multiply_469E0482_Out_2);

                float2 _Add_A708D8B8_Out_2;
                Unity_Add_float2((_UV_F641D8AC_Out_0.xy), _Multiply_469E0482_Out_2, _Add_A708D8B8_Out_2);
                float4 _SampleTexture2D_FCEE2F07_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, _Add_A708D8B8_Out_2);
                float _SampleTexture2D_FCEE2F07_R_4 = _SampleTexture2D_FCEE2F07_RGBA_0.r;
                float _SampleTexture2D_FCEE2F07_G_5 = _SampleTexture2D_FCEE2F07_RGBA_0.g;
                float _SampleTexture2D_FCEE2F07_B_6 = _SampleTexture2D_FCEE2F07_RGBA_0.b;
                float _SampleTexture2D_FCEE2F07_A_7 = _SampleTexture2D_FCEE2F07_RGBA_0.a;
                float4 _Add_C43F9C64_Out_2;
                Unity_Add_float4(_Add_61147478_Out_2, _SampleTexture2D_FCEE2F07_RGBA_0, _Add_C43F9C64_Out_2);
                float4 _UV_21FE18CF_Out_0 = IN.uv0;
                float _Vector1_15A64294_Out_0 = 0.02;
                float2 _Multiply_18B1CE82_Out_2;
                Unity_Multiply_float((_Vector1_15A64294_Out_0.xx), _Normalize_AC6DE0D4_Out_1, _Multiply_18B1CE82_Out_2);

                float _Property_8E618A87_Out_0 = _Dist;
                float2 _Multiply_BD89CCDE_Out_2;
                Unity_Multiply_float(_Multiply_18B1CE82_Out_2, (_Property_8E618A87_Out_0.xx), _Multiply_BD89CCDE_Out_2);

                float2 _Add_62178356_Out_2;
                Unity_Add_float2((_UV_21FE18CF_Out_0.xy), _Multiply_BD89CCDE_Out_2, _Add_62178356_Out_2);
                float4 _SampleTexture2D_73997774_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, _Add_62178356_Out_2);
                float _SampleTexture2D_73997774_R_4 = _SampleTexture2D_73997774_RGBA_0.r;
                float _SampleTexture2D_73997774_G_5 = _SampleTexture2D_73997774_RGBA_0.g;
                float _SampleTexture2D_73997774_B_6 = _SampleTexture2D_73997774_RGBA_0.b;
                float _SampleTexture2D_73997774_A_7 = _SampleTexture2D_73997774_RGBA_0.a;
                float4 _Add_FB55B594_Out_2;
                Unity_Add_float4(_Add_C43F9C64_Out_2, _SampleTexture2D_73997774_RGBA_0, _Add_FB55B594_Out_2);
                float4 _UV_33DF7524_Out_0 = IN.uv0;
                float _Vector1_E44E730C_Out_0 = 0.03;
                float2 _Multiply_A114A2D4_Out_2;
                Unity_Multiply_float((_Vector1_E44E730C_Out_0.xx), _Normalize_AC6DE0D4_Out_1, _Multiply_A114A2D4_Out_2);

                float _Property_566C3CAC_Out_0 = _Dist;
                float2 _Multiply_BA302C8C_Out_2;
                Unity_Multiply_float(_Multiply_A114A2D4_Out_2, (_Property_566C3CAC_Out_0.xx), _Multiply_BA302C8C_Out_2);

                float2 _Add_AAE3C82C_Out_2;
                Unity_Add_float2((_UV_33DF7524_Out_0.xy), _Multiply_BA302C8C_Out_2, _Add_AAE3C82C_Out_2);
                float4 _SampleTexture2D_5EF27566_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, _Add_AAE3C82C_Out_2);
                float _SampleTexture2D_5EF27566_R_4 = _SampleTexture2D_5EF27566_RGBA_0.r;
                float _SampleTexture2D_5EF27566_G_5 = _SampleTexture2D_5EF27566_RGBA_0.g;
                float _SampleTexture2D_5EF27566_B_6 = _SampleTexture2D_5EF27566_RGBA_0.b;
                float _SampleTexture2D_5EF27566_A_7 = _SampleTexture2D_5EF27566_RGBA_0.a;
                float4 _Add_A3B2203F_Out_2;
                Unity_Add_float4(_Add_FB55B594_Out_2, _SampleTexture2D_5EF27566_RGBA_0, _Add_A3B2203F_Out_2);
                float4 _UV_3BE6231F_Out_0 = IN.uv0;
                float _Vector1_6CBA6692_Out_0 = 0.05;
                float2 _Multiply_CF2E1F2F_Out_2;
                Unity_Multiply_float((_Vector1_6CBA6692_Out_0.xx), _Normalize_AC6DE0D4_Out_1, _Multiply_CF2E1F2F_Out_2);

                float _Property_2B116CA1_Out_0 = _Dist;
                float2 _Multiply_4B79D04_Out_2;
                Unity_Multiply_float(_Multiply_CF2E1F2F_Out_2, (_Property_2B116CA1_Out_0.xx), _Multiply_4B79D04_Out_2);

                float2 _Add_CF80E7B3_Out_2;
                Unity_Add_float2((_UV_3BE6231F_Out_0.xy), _Multiply_4B79D04_Out_2, _Add_CF80E7B3_Out_2);
                float4 _SampleTexture2D_398BE3A2_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, _Add_CF80E7B3_Out_2);
                float _SampleTexture2D_398BE3A2_R_4 = _SampleTexture2D_398BE3A2_RGBA_0.r;
                float _SampleTexture2D_398BE3A2_G_5 = _SampleTexture2D_398BE3A2_RGBA_0.g;
                float _SampleTexture2D_398BE3A2_B_6 = _SampleTexture2D_398BE3A2_RGBA_0.b;
                float _SampleTexture2D_398BE3A2_A_7 = _SampleTexture2D_398BE3A2_RGBA_0.a;
                float4 _Add_3F642DBE_Out_2;
                Unity_Add_float4(_Add_A3B2203F_Out_2, _SampleTexture2D_398BE3A2_RGBA_0, _Add_3F642DBE_Out_2);
                float4 _UV_5AF1E1C8_Out_0 = IN.uv0;
                float _Vector1_F4D01191_Out_0 = 0.08;
                float2 _Multiply_6DDFCDC3_Out_2;
                Unity_Multiply_float((_Vector1_F4D01191_Out_0.xx), _Normalize_AC6DE0D4_Out_1, _Multiply_6DDFCDC3_Out_2);

                float _Property_9A81E415_Out_0 = _Dist;
                float2 _Multiply_291AE44C_Out_2;
                Unity_Multiply_float(_Multiply_6DDFCDC3_Out_2, (_Property_9A81E415_Out_0.xx), _Multiply_291AE44C_Out_2);

                float2 _Add_F14D42C9_Out_2;
                Unity_Add_float2((_UV_5AF1E1C8_Out_0.xy), _Multiply_291AE44C_Out_2, _Add_F14D42C9_Out_2);
                float4 _SampleTexture2D_DB8AEE55_RGBA_0 = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, _Add_F14D42C9_Out_2);
                float _SampleTexture2D_DB8AEE55_R_4 = _SampleTexture2D_DB8AEE55_RGBA_0.r;
                float _SampleTexture2D_DB8AEE55_G_5 = _SampleTexture2D_DB8AEE55_RGBA_0.g;
                float _SampleTexture2D_DB8AEE55_B_6 = _SampleTexture2D_DB8AEE55_RGBA_0.b;
                float _SampleTexture2D_DB8AEE55_A_7 = _SampleTexture2D_DB8AEE55_RGBA_0.a;
                float4 _Add_CF1DB9D9_Out_2;
                Unity_Add_float4(_Add_3F642DBE_Out_2, _SampleTexture2D_DB8AEE55_RGBA_0, _Add_CF1DB9D9_Out_2);
                float _Vector1_13B78957_Out_0 = 11;
                float4 _Divide_F1F5B63C_Out_2;
                Unity_Divide_float4(_Add_CF1DB9D9_Out_2, (_Vector1_13B78957_Out_0.xxxx), _Divide_F1F5B63C_Out_2);
                float _Length_E293CA89_Out_1;
                Unity_Length_float2(_Subtract_9124AC61_Out_2, _Length_E293CA89_Out_1);
                float _Property_1A5D431F_Out_0 = _Strength;
                float _Multiply_E03296ED_Out_2;
                Unity_Multiply_float(_Length_E293CA89_Out_1, _Property_1A5D431F_Out_0, _Multiply_E03296ED_Out_2);

                float _Clamp_E1E50AEE_Out_3;
                Unity_Clamp_float(_Multiply_E03296ED_Out_2, 0, 1, _Clamp_E1E50AEE_Out_3);
                float4 _Lerp_D5548CF6_Out_3;
                Unity_Lerp_float4(_SampleTexture2D_4BCC2478_RGBA_0, _Divide_F1F5B63C_Out_2, (_Clamp_E1E50AEE_Out_3.xxxx), _Lerp_D5548CF6_Out_3);
                surface.Color = (_Lerp_D5548CF6_Out_3.xyz);
                surface.Alpha = 1;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord0 : TEXCOORD0;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct GraphVertexOutput
            {
                float4 position : POSITION;

                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                half4 uv0 : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            GraphVertexOutput vert (GraphVertexInput v)
            {
                GraphVertexOutput o = (GraphVertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 uv0 = v.texcoord0;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpacePosition = ObjectSpacePosition;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                o.position = TransformObjectToHClip(v.vertex.xyz);
                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.uv0 = uv0;
                o.uv1 = uv1;

                return o;
            }

            half4 frag (GraphVertexOutput IN ) : SV_Target
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 uv0 = IN.uv0;
                float4 uv1 = IN.uv1;

                
                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;
                // Surface description inputs defined by graph
                surfaceInput.uv0 = uv0;


                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);
                float3 Color = float3(0.5, 0.5, 0.5);
                float Alpha = 1;
                float AlphaClipThreshold = 0;
                // Surface description remap performed by graph
                Color = surf.Color;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

                
         #if _AlphaClip
                clip(Alpha - AlphaClipThreshold);
        #endif
                return half4(Color, Alpha);
            }
            ENDHLSL
        }
        Pass
        {
            Name "ShadowCaster"
            Tags{"LightMode" = "ShadowCaster"}

            ZWrite On ZTest LEqual

            // Material options generated by graph
            Cull Back

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex ShadowPassVertex
            #pragma fragment ShadowPassFragment

            // Defines generated by graph

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float2 _Center;
            float _Dist;
            float _Strength;
            CBUFFER_END

            TEXTURE2D(_MainTex); SAMPLER(sampler_MainTex); float4 _MainTex_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 ObjectSpacePosition;
            };

            struct SurfaceDescriptionInputs
            {
            };


            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                description.Position = IN.ObjectSpacePosition;
                return description;
            }

            struct SurfaceDescription
            {
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                surface.Alpha = 1;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct VertexOutput
            {
                float2 uv           : TEXCOORD0;
                float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                half4 uv1 : TEXCOORD8;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            float3 _LightDirection;

            VertexOutput ShadowPassVertex(GraphVertexInput v)
            {
                VertexOutput o;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpacePosition = ObjectSpacePosition;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.uv1 = uv1;

                
                float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
                float3 normalWS = TransformObjectToWorldNormal(v.normal);

                float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

            #if UNITY_REVERSED_Z
                clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
            #else
                clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
            #endif
                o.clipPos = clipPos;

                return o;
            }

            half4 ShadowPassFragment(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }

            ENDHLSL
        }

        Pass
        {
            Name "DepthOnly"
            Tags{"LightMode" = "DepthOnly"}

            ZWrite On
            ColorMask 0

            // Material options generated by graph
            Cull Back

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float2 _Center;
            float _Dist;
            float _Strength;
            CBUFFER_END

            TEXTURE2D(_MainTex); SAMPLER(sampler_MainTex); float4 _MainTex_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 ObjectSpacePosition;
            };

            struct SurfaceDescriptionInputs
            {
            };


            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                description.Position = IN.ObjectSpacePosition;
                return description;
            }

            struct SurfaceDescription
            {
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                surface.Alpha = 1;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct VertexOutput
            {
                float2 uv           : TEXCOORD0;
                float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                half4 uv1 : TEXCOORD8;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            VertexOutput vert(GraphVertexInput v)
            {
                VertexOutput o = (VertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpacePosition = ObjectSpacePosition;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.uv1 = uv1;

                o.clipPos = TransformObjectToHClip(v.vertex.xyz);
                return o;
            }

            half4 frag(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }
            ENDHLSL
        }
    }
    FallBack "Hidden/InternalErrorShader"
}
